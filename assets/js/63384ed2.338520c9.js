"use strict";(self.webpackChunknetworkx_guide=self.webpackChunknetworkx_guide||[]).push([[663],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),g=s(n),m=r,c=g["".concat(d,".").concat(m)]||g[m]||u[m]||o;return n?a.createElement(c,l(l({ref:t},p),{},{components:n})):a.createElement(c,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=g;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7294);function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(7462),r=n(7294),o=n(2389),l=n(3725),i=n(6010),d="tabItem_LplD";function s(e){var t,n,o,s=e.lazy,p=e.block,u=e.defaultValue,g=e.values,m=e.groupId,c=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=g?g:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,l.lx)(k,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===u?u:null!=(t=null!=u?u:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=h[0])?void 0:o.props.value;if(null!==v&&!k.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,l.UB)(),y=b.tabGroupChoices,N=b.setTabGroupChoices,w=(0,r.useState)(v),_=w[0],x=w[1],T=[],G=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var C=y[m];null!=C&&C!==_&&k.some((function(e){return e.value===C}))&&x(C)}var I=function(e){var t=e.currentTarget,n=T.indexOf(t),a=k[n].value;a!==_&&(G(t),x(a),null!=m&&N(m,a))},P=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;n=T[a]||T[0];break;case"ArrowLeft":var r=T.indexOf(e.currentTarget)-1;n=T[r]||T[T.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":p},c)},k.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:function(e){return T.push(e)},onKeyDown:P,onFocus:I,onClick:I},o,{className:(0,i.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":_===t})}),null!=n?n:t)}))),s?(0,r.cloneElement)(h.filter((function(e){return e.props.value===_}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==_})}))))}function p(e){var t=(0,o.Z)();return r.createElement(s,(0,a.Z)({key:String(t)},e))}},6668:function(e,t,n){n.r(t),n.d(t,{assets:function(){return g},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=n(9877),i=n(8215),d=["components"],s={id:"getting-started",title:"Getting started",sidebar_label:"Getting started",slug:"/getting-started"},p=void 0,u={unversionedId:"getting-started/getting-started",id:"getting-started/getting-started",title:"Getting started",description:"NetworkX is a Python package for the creation, manipulation and the study of the structure, dynamics and functions of complex networks. It offers data structures for graphs, digraphs, multigraphs, and multidigraphs as well as standard graph algorithms. It enables you to load and store networks in many data formats, build and analyze network structure, generate types of random or classic networks, and much more. It is a great starting point for someone looking to get quick insights from their data on the fly.",source:"@site/docs/getting-started/getting-started.md",sourceDirName:"getting-started",slug:"/getting-started",permalink:"/getting-started",editUrl:"https://github.com/memgraph/networkx-guide/edit/main/docs/getting-started/getting-started.md",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting started",sidebar_label:"Getting started",slug:"/getting-started"},sidebar:"networkx_guide",previous:{title:"Overview",permalink:"/"},next:{title:"Installation",permalink:"/installation"}},g={},m=[{value:"NetworkX graph types",id:"networkx-graph-types",level:2},{value:"Graph creation",id:"graph-creation",level:2},{value:"Graph generators",id:"graph-generators",level:3},{value:"Reading graphs",id:"reading-graphs",level:3},{value:"Adding nodes and edges",id:"adding-nodes-and-edges",level:3},{value:"Removing nodes and edges from the graph",id:"removing-nodes-and-edges-from-the-graph",level:3},{value:"Graph examination",id:"graph-examination",level:2},{value:"Where to next?",id:"where-to-next",level:2}],c={toc:m};function h(e){var t=e.components,s=(0,r.Z)(e,d);return(0,o.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"NetworkX is a Python package for the creation, manipulation and the study of the structure, dynamics and functions of complex networks. It offers data structures for ",(0,o.kt)("strong",{parentName:"p"},"graphs"),", ",(0,o.kt)("strong",{parentName:"p"},"digraphs"),", ",(0,o.kt)("strong",{parentName:"p"},"multigraphs"),", and ",(0,o.kt)("strong",{parentName:"p"},"multidigraphs")," as well as standard graph algorithms. It enables you to load and store networks in many data formats, build and analyze network structure, generate types of random or classic networks, and much more. It is a great starting point for someone looking to get ",(0,o.kt)("strong",{parentName:"p"},"quick insights")," from their data on the fly."),(0,o.kt)("p",null,"This is the perfect place for graph enthusiasts who are starting their journey through the NetworkX Python package. With this guide, you are going to get a basic understanding of the most important concepts in NetworkX, such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#networkx-graph-types"},(0,o.kt)("strong",{parentName:"a"},"NetworkX graph types"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#graph-creation"},(0,o.kt)("strong",{parentName:"a"},"Graph creation"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#graph-examination"},(0,o.kt)("strong",{parentName:"a"},"Graph examination")))),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"prerequisites")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"For the getting started guide you need to have ",(0,o.kt)("strong",{parentName:"p"},"Python")," and ",(0,o.kt)("strong",{parentName:"p"},"NetworkX")," installed locally. If that's not the case for you, check out the ",(0,o.kt)("a",{parentName:"p",href:"/installation"},(0,o.kt)("strong",{parentName:"a"},"Installation guide")),"."))),(0,o.kt)("h2",{id:"networkx-graph-types"},"NetworkX graph types"),(0,o.kt)("p",null,"The model of the graph structure in NetworkX is similar to the labeled-property graph. Regarding the naming convention, relationships are called edges, and properties are called attributes in NetworkX. You can use the following NetworkX graph classes:"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",alt:"networkx-graph-types",src:n(55).Z,width:"1200",height:"600"})),(0,o.kt)("h2",{id:"graph-creation"},"Graph creation"),(0,o.kt)("p",null,"NetworkX graph objects can be created in three ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"using the ",(0,o.kt)("a",{parentName:"li",href:"#graph-generators"},(0,o.kt)("strong",{parentName:"a"},"graph generators"))," - standard algorithms to create network topologies,"),(0,o.kt)("li",{parentName:"ul"},"by ",(0,o.kt)("a",{parentName:"li",href:"#reading-graphs"},(0,o.kt)("strong",{parentName:"a"},"reading"))," from different formats,"),(0,o.kt)("li",{parentName:"ul"},"by ",(0,o.kt)("a",{parentName:"li",href:"#adding-nodes-and-edges"},(0,o.kt)("strong",{parentName:"a"},"adding nodes and edges"))," explicitly.")),(0,o.kt)("p",null,"It is also possible to ",(0,o.kt)("a",{parentName:"p",href:"#removing-nodes-and-edges-from-the-graph"},(0,o.kt)("strong",{parentName:"a"},"remove nodes and edges"))," from your graph."),(0,o.kt)("h3",{id:"graph-generators"},"Graph generators"),(0,o.kt)("p",null,"There are many types of graph generators inside NetworkX. They create predefined network structures, so that you can continue on exploring it and learning more about graph algorithms. Some of the most often used generators are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"balanced_tree()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"complete_graph()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cycle_graph()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"star_graph()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"karate_club_graph()"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)(l.Z,{groupId:"graph_generators",defaultValue:"code",values:[{label:"Python code",value:"code"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"code",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's generate and draw Zachary\u2019s Karate Club graph with the following Python code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import networkx as nx\nimport matplotlib.pyplot as plt\n\ngenerated_graph = nx.karate_club_graph()\npos = nx.spring_layout(generated_graph, scale=0.5)\nnx.draw(generated_graph, pos)\n\nplt.show()\n"))),(0,o.kt)(i.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("p",null,"  The output of the previous Python code looks like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",alt:"karate-club-dataset",src:n(3932).Z,width:"1252",height:"918"})))),(0,o.kt)("h3",{id:"reading-graphs"},"Reading graphs"),(0,o.kt)("p",null,"Data can be imported from many different sources and file formats: Adjacency List, Multiline Adjacency List, Edge List, GEXF, GML, Pickle, GraphML, JSON, LEDA, SparseGraph6, Pajek, GIS Shapefile and Matrix Market."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)(l.Z,{groupId:"reading_graphs",defaultValue:"csv",values:[{label:"CSV file",value:"csv"},{label:"Python code",value:"code"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"csv",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's say we have the following ",(0,o.kt)("inlineCode",{parentName:"p"},"graph.csv")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},"source,target\n1,2\n1,3\n2,3\n1,4\n2,4\n3,4\n1,5\n1,6\n"))),(0,o.kt)(i.Z,{value:"code",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's import the ",(0,o.kt)("inlineCode",{parentName:"p"},"graph.csv")," file and draw the graph:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import networkx as nx\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ngraph_type = nx.Graph()\ndf = pd.read_csv('graph.csv')\nG = nx.from_pandas_edgelist(df, create_using=graph_type)\n\nnx.draw(G)\nplt.show()\n"))),(0,o.kt)(i.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("p",null,"  The output of the previous Python code looks like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",alt:"draw-csv",src:n(4369).Z,width:"1266",height:"942"})))),(0,o.kt)("h3",{id:"adding-nodes-and-edges"},"Adding nodes and edges"),(0,o.kt)("p",null,"All NetworkX graph classes allow hashable Python objects (except ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),") as nodes. Hashable objects include a text string, an image, an XML object, another Graph, a customized node object, and more. ",(0,o.kt)("strong",{parentName:"p"},"Nodes")," can be added and manipulated by using the following methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"G.add_node(node)")," - add a single node to graph ",(0,o.kt)("inlineCode",{parentName:"li"},"G")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"G.add_nodes_from(nodes)")," - add nodes from container of nodes to graph ",(0,o.kt)("inlineCode",{parentName:"li"},"G")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"G.remove_node(node)")," - remove node from all adjacent edges from graph ",(0,o.kt)("inlineCode",{parentName:"li"},"G")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"G.remove_nodes_from(nodes)")," - remove nodes from container of nodes from graph ",(0,o.kt)("inlineCode",{parentName:"li"},"G"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Edges")," often have data associated with them. Any Python object can be assigned as an edge attribute. Edges can be added and manipulated by using the following methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"G.add_edge(u, v)")," - add edge between nodes ",(0,o.kt)("inlineCode",{parentName:"li"},"u")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"v")," in graph ",(0,o.kt)("inlineCode",{parentName:"li"},"G")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"G.add_edges_from(ebunch)")," - add edges from the container of edges to graph ",(0,o.kt)("inlineCode",{parentName:"li"},"G")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"G.add_weighted_edges_from(ebunch)")," - add weighted edges from the container of edges to graph ",(0,o.kt)("inlineCode",{parentName:"li"},"G")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"G.remove_edge(u, v)")," - remove edge between nodes ",(0,o.kt)("inlineCode",{parentName:"li"},"u")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"v")," from graph ",(0,o.kt)("inlineCode",{parentName:"li"},"G")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"G.remove_edges_from(ebunch)")," - remove edges from list or container of edge tuples from graph ",(0,o.kt)("inlineCode",{parentName:"li"},"G"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)(l.Z,{groupId:"adding_nodes_and_edges",defaultValue:"code",values:[{label:"Python code",value:"code"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"code",mdxType:"TabItem"},(0,o.kt)("p",null,"The following Python code shows how to add one or multiple nodes and edges. It will also draw a graph with Matplotlib library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import networkx as nx\n\nimport matplotlib.pyplot as plt\n\ng = nx.Graph()\n\n# Adding one node\ng.add_node("1", label="Person", name="Kevin Bacon", age=64)\n\n# Adding multiple nodes\ng.add_nodes_from(\n    [\n        ("2", {"label": "Person", "name": "Ian McKellen", "age": 83}),\n        ("3", {"label": "Person", "name": "James McAvoy", "age": 43}),\n        ("4", {"label": "Person", "name": "Michael Fassbender", "age": 45}),\n    ]\n)\n\n# Adding one edge\ng.add_edge("1", "3", type="ACTED_WITH")\n\n# Adding multiple edges\ng.add_edges_from([("1", "4"), ("2", "3"), ("2", "4")], type="ACTED_WITH")\n\n# Graph drawing\npos = nx.circular_layout(g)\nnx.draw(g, pos, node_size=10000)\n\nlabels = nx.get_node_attributes(g, "name")\nedge_labels = nx.get_edge_attributes(g, "type")\n\nnx.draw_networkx_labels(g, pos, labels=labels, font_size=10, font_color="white")\nnx.draw_networkx_edge_labels(g, pos, edge_labels=edge_labels, font_size=10)\n\nplt.show()\n'))),(0,o.kt)(i.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("p",null,"  The output of the previous Python code looks like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",alt:"kevin-bacon",src:n(6910).Z,width:"2164",height:"1718"})))),(0,o.kt)("h3",{id:"removing-nodes-and-edges-from-the-graph"},"Removing nodes and edges from the graph"),(0,o.kt)("p",null,"The following methods are used to remove nodes and edges:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Graph.remove_node()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Graph.remove_nodes_from()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Graph.remove_edge()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Graph.remove_edges_from()"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)(l.Z,{groupId:"removing_nodes_and_edges",defaultValue:"code",values:[{label:"Python code",value:"code"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"code",mdxType:"TabItem"},(0,o.kt)("p",null,"The following Python code shows how to remove one or multiple nodes and edges."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import networkx as nx\n\ng = nx.Graph()\ng.add_nodes_from([1, 2, 3, 4, 5, 6])\ng.add_edges_from([(1, 2), (2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6)])\nprint(g.nodes)\nprint(g.edges)\n\ng.remove_node(1)\nprint(g.nodes)\nprint(g.edges)\n\ng.remove_nodes_from([2, 3])\nprint(g.nodes)\nprint(g.edges)\n\ng.remove_edges_from([(4, 5), (4, 6)])\nprint(g.nodes)\nprint(g.edges)\n"))),(0,o.kt)(i.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("p",null,"  The output of the previous Python code looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"[1, 2, 3, 4, 5, 6]\n[(1, 2), (2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6)]\n[2, 3, 4, 5, 6]\n[(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6)]\n[4, 5, 6]\n[(4, 5), (4, 6), (5, 6)]\n[4, 5, 6]\n[(5, 6)]\n")),(0,o.kt)("p",null,"Notice how when the node ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," was removed, all edges incident with the removed node were also removed from the graph."))),(0,o.kt)("h2",{id:"graph-examination"},"Graph examination"),(0,o.kt)("p",null,"Let's define a simple graph ",(0,o.kt)("inlineCode",{parentName:"p"},"G"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import networkx as nx\n\ng = nx.Graph()\ng.add_nodes_from([1, 2, 3, 4, 5, 6])\ng.add_edges_from([(1, 2), (2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6)])\n")),(0,o.kt)("p",null,"To list the nodes and edges in the graph use the following code:"),(0,o.kt)(l.Z,{groupId:"listing_nodes_and_edges",defaultValue:"code",values:[{label:"Python code",value:"code"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"code",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(G.nodes)\nprint(G.edges)\n"))),(0,o.kt)(i.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("p",null,"  The output of the previous Python code looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"[1, 2, 3, 4, 5, 6]\n[(1, 2), (2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6)]\n")))),(0,o.kt)("p",null,"To check out its number of nodes or edges, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"number_of_nodes()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"number_of_edges()")," methods."),(0,o.kt)(l.Z,{groupId:"listing_number",defaultValue:"code",values:[{label:"Python code",value:"code"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"code",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(G.number_of_nodes())\nprint(G.number_of_edges())\n"))),(0,o.kt)(i.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("p",null,"  The output of the previous Python code looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"6\n7\n")))),(0,o.kt)("p",null,"To check degrees of a set of nodes, that is, with how many edges those nodes are incident with, use ",(0,o.kt)("inlineCode",{parentName:"p"},"G.degree()")," method."),(0,o.kt)(l.Z,{groupId:"degree",defaultValue:"code",values:[{label:"Python code",value:"code"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"code",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(G.degree([4, 5]))\n"))),(0,o.kt)(i.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("p",null,"  The output of the previous Python code looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"[(4, 3), (5, 3)]\n")))),(0,o.kt)("h2",{id:"where-to-next"},"Where to next?"),(0,o.kt)("p",null,"There are many other ",(0,o.kt)("a",{parentName:"p",href:"https://memgraph.com/memgraph-for-networkx?utm_source=networkx-guide&utm_medium=referral&utm_campaign=networkx_ppp&utm_term=getting%2Bstarted&utm_content=learningresources"},(0,o.kt)("strong",{parentName:"a"},"learning resources")),", such as courses, whitepapers and blog posts. With the help of these valuable resources, you can learn more about the importance of graph analytics and which tools are out there to help you."))}h.isMDXComponent=!0},4369:function(e,t,n){t.Z=n.p+"assets/images/draw-csv-88f3c39c2a7c9614c316ebda5d5ec9f8.png"},3932:function(e,t,n){t.Z=n.p+"assets/images/karate-club-dataset-dacd5c2b9df9f5630fd645644a70b3da.png"},6910:function(e,t,n){t.Z=n.p+"assets/images/kevin-bacon-57306c5f3751193e86ddeb6ffe68826f.png"},55:function(e,t,n){t.Z=n.p+"assets/images/networkx-graph-types-cf81549883bb93cd4b558d22ceb8a27a.png"}}]);