"use strict";(self.webpackChunknetworkx_guide=self.webpackChunknetworkx_guide||[]).push([[982],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),h=a,d=p["".concat(i,".").concat(h)]||p[h]||m[h]||l;return r?n.createElement(d,o(o({ref:t},u),{},{components:r})):n.createElement(d,o({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(7294),a=r(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:r,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,o),hidden:r},t)}},5488:(e,t,r)=>{r.d(t,{Z:()=>h});var n=r(7462),a=r(7294),l=r(6010),o=r(2389),s=r(7392),i=r(7094),c=r(2466);const u="tabList__CuJ",m="tabItem_LNqP";function p(e){var t;const{lazy:r,block:o,defaultValue:p,values:h,groupId:d,className:g}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=h??f.map((e=>{let{props:{value:t,label:r,attributes:n}}=e;return{value:t,label:r,attributes:n}})),b=(0,s.l)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===p?p:p??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==v&&!y.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,i.U)(),[x,_]=(0,a.useState)(v),N=[],{blockElementScrollPositionUntilNextRender:O}=(0,c.o5)();if(null!=d){const e=k[d];null!=e&&e!==x&&y.some((t=>t.value===e))&&_(e)}const E=e=>{const t=e.currentTarget,r=N.indexOf(t),n=y[r].value;n!==x&&(O(t),_(n),null!=d&&w(d,String(n)))},T=e=>{var t;let r=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;r=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;r=N[t]??N[N.length-1];break}}null==(t=r)||t.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},g)},y.map((e=>{let{value:t,label:r,attributes:o}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>N.push(e),onKeyDown:T,onClick:E},o,{className:(0,l.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":x===t})}),r??t)}))),r?(0,a.cloneElement)(f.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function h(e){const t=(0,o.Z)();return a.createElement(p,(0,n.Z)({key:String(t)},e))}},5136:(e,t,r)=>{r.d(t,{Z:()=>l});var n=r(7294);const a={ctaButton:"ctaButton_fu4n",ctaBox:"ctaBox_gZT4"};function l(e){const{title:t,url:r}=e;return n.createElement("div",{className:a.ctaBox},n.createElement("a",{href:r,className:a.ctaButton,style:a},t))}},1425:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var n=r(7462),a=(r(7294),r(3905)),l=r(5488),o=r(5162),s=r(5136);const i={title:"Closeness centrality",sidebar_label:"Closeness centrality"},c=void 0,u={unversionedId:"algorithms/centrality-algorithms/closeness-centrality",id:"algorithms/centrality-algorithms/closeness-centrality",title:"Closeness centrality",description:"Another important centrality measure is closeness centrality. Closeness centrality is a measure of centrality in a network calculated as the reciprocal of the sum of the lengths of the shortest paths between the node and all other nodes in the graph. Simply, the closer the node is to other nodes, the more central it is.",source:"@site/docs/algorithms/centrality-algorithms/closeness-centrality.md",sourceDirName:"algorithms/centrality-algorithms",slug:"/algorithms/centrality-algorithms/closeness-centrality",permalink:"/algorithms/centrality-algorithms/closeness-centrality",draft:!1,editUrl:"https://github.com/memgraph/networkx-guide/edit/main/docs/algorithms/centrality-algorithms/closeness-centrality.md",tags:[],version:"current",frontMatter:{title:"Closeness centrality",sidebar_label:"Closeness centrality"},sidebar:"networkx_guide",previous:{title:"Degree centrality",permalink:"/algorithms/centrality-algorithms/degree-centrality"},next:{title:"Katz centrality",permalink:"/algorithms/centrality-algorithms/katz-centrality"}},m={},p=[{value:"Usage in NetworkX",id:"usage-in-networkx",level:2},{value:"Example",id:"example",level:3},{value:"Where to next?",id:"where-to-next",level:2}],h={toc:p};function d(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Another important centrality measure is closeness centrality. Closeness centrality is a measure of centrality in a network calculated as the reciprocal of the sum of the lengths of the shortest paths between the node and all other nodes in the graph. Simply, the closer the node is to other nodes, the more central it is. "),(0,a.kt)("h2",{id:"usage-in-networkx"},"Usage in NetworkX"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"closeness_centrality(G, u=None, distance=None, wf_improved=True)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Not fast enough?")," Find 100x faster algorithms ",(0,a.kt)("a",{parentName:"p",href:"https://memgraph.com/memgraph-for-networkx?utm_source=networkx-guide&utm_medium=referral&utm_campaign=networkx_ppp&utm_term=centralityalgorithms%2Bcloseness&utm_content=findfasteralgorithms"},(0,a.kt)("strong",{parentName:"a"},"here")),"."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"First save locally ",(0,a.kt)("a",{parentName:"p",href:"https://public-assets.memgraph.com/networkx-resources/graph.gexf"},(0,a.kt)("inlineCode",{parentName:"a"},"graph.gexf"))," to run the below example."),(0,a.kt)(l.Z,{groupId:"bc",defaultValue:"code",values:[{label:"Python code",value:"code"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import networkx as nx\nimport matplotlib.pyplot as plt\n\n\nG = nx.read_gexf("graph.gexf")\n\ncentrality = nx.closeness_centrality(G)\ncolors = list(centrality.values())\n\nnx.draw_networkx(\n    G,\n    nx.spring_layout(G),\n    node_size=50,\n    node_color=colors,\n    edge_color="g",\n    with_labels=False,\n)\n\nplt.axis("off")\nplt.show()\n\n'))),(0,a.kt)(o.Z,{value:"output",mdxType:"TabItem"},(0,a.kt)("p",null,(0,a.kt)("img",{alt:"centrality-closeness",src:r(8455).Z,width:"1544",height:"1206"})))),(0,a.kt)("h2",{id:"where-to-next"},"Where to next?"),(0,a.kt)("p",null,"There are many graph algorithms libraries out there, with their own implementations of closeness centrality algorithm. NetworkX's algorithms are written in Python, and there are many other libraries that offer faster C++ implementations, such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage"},(0,a.kt)("strong",{parentName:"a"},"MAGE")),", a graph algorithms library developed by Memgraph team."),(0,a.kt)(s.Z,{title:"Memgraph for NetworkX developers",url:"https://memgraph.com/memgraph-for-networkx?utm_source=networkx-guide&utm_medium=referral&utm_campaign=networkx_ppp&utm_term=centralityalgorithms%2Bcloseness&utm_content=ctabutton",mdxType:"CtaButton"}))}d.isMDXComponent=!0},8455:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/closeness-e1a5f2bc5a39c333887e80cd09a78bf5.png"}}]);