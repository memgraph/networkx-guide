"use strict";(self.webpackChunknetworkx_guide=self.webpackChunknetworkx_guide||[]).push([[961],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(h,l(l({ref:t},p),{},{components:n})):o.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(7294),a=n(6010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var o=n(7462),a=n(7294),r=n(6010),l=n(2389),i=n(7392),s=n(7094),c=n(2466);const p="tabList__CuJ",d="tabItem_LNqP";function u(e){var t;const{lazy:n,block:l,defaultValue:u,values:m,groupId:h,className:g}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??f.map((e=>{let{props:{value:t,label:n,attributes:o}}=e;return{value:t,label:n,attributes:o}})),k=(0,i.l)(b,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===u?u:u??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,s.U)(),[x,_]=(0,a.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:N}=(0,c.o5)();if(null!=h){const e=v[h];null!=e&&e!==x&&b.some((t=>t.value===e))&&_(e)}const C=e=>{const t=e.currentTarget,n=T.indexOf(t),o=b[n].value;o!==x&&(N(t),_(o),null!=h&&w(h,String(o)))},E=e=>{var t;let n=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},g)},b.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>T.push(e),onKeyDown:E,onClick:C},l,{className:(0,r.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":x===t})}),n??t)}))),n?(0,a.cloneElement)(f.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function m(e){const t=(0,l.Z)();return a.createElement(u,(0,o.Z)({key:String(t)},e))}},5136:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(7294);const a={ctaButton:"ctaButton_fu4n",ctaBox:"ctaBox_gZT4"};function r(e){const{title:t,url:n}=e;return o.createElement("div",{className:a.ctaBox},o.createElement("a",{href:n,className:a.ctaButton,style:a},t))}},7904:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var o=n(7462),a=(n(7294),n(3905)),r=n(5136),l=n(5488),i=n(5162);const s={id:"weakly-connected-components",title:"Weakly connected components algorithm (Union find)",sidebar_label:"Weakly connected components (Union find)"},c=void 0,p={unversionedId:"algorithms/components/weakly-connected-components",id:"algorithms/components/weakly-connected-components",title:"Weakly connected components algorithm (Union find)",description:"A weakly connected component is a subgraph that is unreachable from other nodes/vertices of a graph or subgraph. The algorithm was described by A. Galler and Michael J. in 1964 and specific implementations either utilize breadth-first search or depth-first search to find the graph components.",source:"@site/docs/algorithms/components/weakly-connected-components.md",sourceDirName:"algorithms/components",slug:"/algorithms/components/weakly-connected-components",permalink:"/algorithms/components/weakly-connected-components",draft:!1,editUrl:"https://github.com/memgraph/networkx-guide/edit/main/docs/algorithms/components/weakly-connected-components.md",tags:[],version:"current",frontMatter:{id:"weakly-connected-components",title:"Weakly connected components algorithm (Union find)",sidebar_label:"Weakly connected components (Union find)"},sidebar:"networkx_guide",previous:{title:"Girvan-Newman",permalink:"/algorithms/community-detection/girvan-newman"},next:{title:"Biggest challenges",permalink:"/biggest-challenges"}},d={},u=[{value:"Practical Applications",id:"practical-applications",level:2},{value:"Pseudocode",id:"pseudocode",level:2},{value:"Usage in NetworkX",id:"usage-in-networkx",level:2},{value:"Method input",id:"method-input",level:3},{value:"Method output",id:"method-output",level:3},{value:"Example",id:"example",level:3},{value:"Where to next?",id:"where-to-next",level:2}],m={toc:u};function h(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A weakly connected component is a subgraph that is unreachable from other nodes/vertices of a graph or subgraph. The algorithm was described by A. Galler and Michael J. in 1964 and specific implementations either utilize breadth-first search or depth-first search to find the graph components.\nHow does it work?\nThe Weakly Connected Components algorithm (WCC), also known as Union Find, searches for distinct sets of connected nodes in a graph. All nodes in such a set are reachable from any other node in the same set.\nWhile the Strongly Connected Components algorithm (SCC) requires nodes to be reachable in both directions, WCC only requires nodes to be reachable in one direction. Both algorithms are used for network structure analysis."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"WCC-example",src:n(1918).Z,width:"1124",height:"889"})),(0,a.kt)("p",null,"For example, in the graph above, you can see three weakly connected components. Nodes from the subgraph {A, B, C} aren\u2019t connected to any other nodes in the graph and therefore must be a separate component."),(0,a.kt)("h2",{id:"practical-applications"},"Practical Applications"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The Weakly Connected Component algorithm is mostly used for graph pre-processing. Many graph algorithms require networks to be fully connected without distinct components. Union find can be used to find and potentially eliminate such components."),(0,a.kt)("li",{parentName:"ul"},"WCC can be used for basic community detection use cases where distinct disconnected groups are expected."),(0,a.kt)("li",{parentName:"ul"},"Some social networks can utilize weakly connected components for recommendation generating purposes.")),(0,a.kt)("h2",{id:"pseudocode"},"Pseudocode"),(0,a.kt)("p",null,"Start by labeling all nodes as unvisited. Then, iterate over the nodes in any order. For each node, if it wasn\u2019t visited, run BFS from that node and add all reachable nodes as the same component. Add them to the list of visited nodes as well. If the node was already visited, skip it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"visited_nodes = []\ncomponents = []\nFOR EACH node n in graph\n    IF n is not in visited_nodes THEN\n        connected_nodes = BFS(v)\n        ADD connected_nodes TO visited_nodes\n        ADD connected_nodes TO component\n    ENDIF\nENDFOR\n")),(0,a.kt)("h2",{id:"usage-in-networkx"},"Usage in NetworkX"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"weakly_connected_components(G)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Not fast enough?")," Find 100x faster algorithms ",(0,a.kt)("a",{parentName:"p",href:"https://memgraph.com/memgraph-for-networkx?utm_source=networkx-guide&utm_medium=referral&utm_campaign=networkx_ppp&utm_term=components%2Bweaklyconnectedcomponents&utm_content=findfasteralgorithms"},(0,a.kt)("strong",{parentName:"a"},"here")),"."),(0,a.kt)("h3",{id:"method-input"},"Method input"),(0,a.kt)("p",null,"The input parameter of the method, ",(0,a.kt)("inlineCode",{parentName:"p"},"G"),", is a directed graph."),(0,a.kt)("h3",{id:"method-output"},"Method output"),(0,a.kt)("p",null,"The output of the method is a generator of sets. Each set contains the nodes of one weakly connected component."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)(l.Z,{groupId:"wcc",defaultValue:"code",values:[{label:"Python code",value:"code"},{label:"Output",value:"output"},{label:"Visualization",value:"visualization"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\nimport networkx as nx\nfrom networkx.algorithms.components import weakly_connected_components\n\nG = nx.path_graph(4, create_using=nx.DiGraph())\nnx.add_path(G, [10, 11, 12])\n\ncommunities = weakly_connected_components(G)\n\nnode_groups = []\nfor com in communities:\n  node_groups.append(list(com))\n\nprint(node_groups)\n\ncolor_map = []\nfor node in G:\n    if node in node_groups[0]:\n        color_map.append('orange')\n    else: \n        color_map.append('red')  \n\nnx.draw(G, node_color=color_map, with_labels=True)\nplt.show()\n"))),(0,a.kt)(i.Z,{value:"output",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[[0, 1, 2, 3], [10, 11, 12]]\n"))),(0,a.kt)(i.Z,{value:"visualization",mdxType:"TabItem"},(0,a.kt)("p",null,"The network has two weakly connected components:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"WCC matplotlib",src:n(8729).Z,width:"640",height:"480"})))),(0,a.kt)("h2",{id:"where-to-next"},"Where to next?"),(0,a.kt)("p",null,"There are many graph algorithms libraries out there, with their own implementations of weakly connected components algorithm. NetworkX's algorithms are written in Python, and there are many other libraries that offer faster C++ implementations, such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/memgraph/mage"},(0,a.kt)("strong",{parentName:"a"},"MAGE")),", a graph algorithms library developed by Memgraph team."),(0,a.kt)(r.Z,{title:"Memgraph for NetworkX developers",url:"https://memgraph.com/memgraph-for-networkx?utm_source=networkx-guide&utm_medium=referral&utm_campaign=networkx_ppp&utm_term=components%2Bweaklyconnectedcomponents&utm_content=ctabutton",mdxType:"CtaButton"}))}h.isMDXComponent=!0},1918:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/wcc-example-0db447c402ad732b74567c79ae103ba1.jpg"},8729:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/wcc-matplotlib-9d37b46220fe1db6aa79f8d922df2db6.png"}}]);