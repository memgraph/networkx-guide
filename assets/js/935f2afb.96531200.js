"use strict";(self.webpackChunknetworkx_guide=self.webpackChunknetworkx_guide||[]).push([[53],{1109:function(t){t.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"networkx_guide":[{"type":"link","label":"Overview","href":"/","docId":"overview"},{"type":"category","label":"Getting started","items":[{"type":"link","label":"Installation","href":"/installation","docId":"getting-started/installation"},{"type":"link","label":"Getting started","href":"/getting-started","docId":"getting-started/getting-started"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Visualizing graphs","items":[{"type":"link","label":"Visualization overview","href":"/visualization","docId":"visualization/visualization"},{"type":"link","label":"Drawing basics","href":"/visualization/basics","docId":"visualization/basics"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Functions","items":[{"type":"link","label":"Functions overview","href":"/functions","docId":"functions/functions"},{"type":"category","label":"Attributes","items":[{"type":"link","label":"Attribute basics","href":"/functions/attributes/basics","docId":"functions/attributes/basics"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Algorithms","items":[{"type":"link","label":"Algorithms overview","href":"/algorithms","docId":"algorithms/algorithms"},{"type":"category","label":"Shortest path","items":[{"type":"link","label":"Shortest path","href":"/algorithms/shortest-path","docId":"algorithms/shortest-path/shortest-path"},{"type":"link","label":"Dijkstra","href":"/algorithms/shortest-path/dijkstra","docId":"algorithms/shortest-path/dijkstra"},{"type":"link","label":"A* search","href":"/algorithms/shortest-path/a-star-search","docId":"algorithms/shortest-path/a-star-search"},{"type":"link","label":"Floyd-Warshall","href":"/algorithms/shortest-path/floyd-warshall","docId":"algorithms/shortest-path/floyd-warshall"}],"collapsed":true,"collapsible":true},{"type":"link","label":"PageRank","href":"/algorithms/link-analysis/pagerank","docId":"algorithms/link-analysis/pagerank"},{"type":"category","label":"Community detection","items":[{"type":"link","label":"Community detection","href":"/algorithms/community-detection","docId":"algorithms/community-detection/community-detection"},{"type":"link","label":"Girvan-Newman","href":"/algorithms/community-detection/girvan-newman","docId":"algorithms/community-detection/girvan-newman"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Weakly connected components (Union find)","href":"/algorithms/components/weakly-connected-components","docId":"algorithms/components/weakly-connected-components"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Other resources","href":"/other-resources","docId":"other-resources"}]},"docs":{"algorithms/algorithms":{"id":"algorithms/algorithms","title":"Algorithms overview","description":"So far, we have covered the following concepts:","sidebar":"networkx_guide"},"algorithms/community-detection/community-detection":{"id":"algorithms/community-detection/community-detection","title":"Community detection algorithms","description":"While humans are very good at detecting distinct or repetitive patterns among a few components, the nature of large interconnected networks makes it practically impossible to perform such basic tasks manually. Groups of densely connected nodes are easy to spot visually, but more sophisticated methods are needed to perform these tasks programmatically. Community detection algorithms are used to find such groups of densely connected components in various networks.","sidebar":"networkx_guide"},"algorithms/community-detection/girvan-newman":{"id":"algorithms/community-detection/girvan-newman","title":"Girvan-Newman algorithm","description":"The Girvan-Newman algorithm for the detection and analysis of community structure relies on the iterative elimination of edges that have the highest number of shortest paths between nodes passing through them. By removing edges from the graph one-by-one, the network breaks down into smaller pieces, so-called communities. The algorithm was introduced by Michelle Girvan and Mark Newman.","sidebar":"networkx_guide"},"algorithms/components/weakly-connected-components":{"id":"algorithms/components/weakly-connected-components","title":"Weakly connected components algorithm (Union find)","description":"A weakly connected component is a subgraph that is unreachable from other nodes/vertices of a graph or subgraph. The algorithm was described by A. Galler and Michael J. in 1964 and specific implementations either utilize breadth-first search or depth-first search to find the graph components.","sidebar":"networkx_guide"},"algorithms/link-analysis/pagerank":{"id":"algorithms/link-analysis/pagerank","title":"PageRank algorithm","description":"Typing terms in Google and searching them up yields a lot of results. But why are we getting the results in that order? The answer to that question is the PageRank algorithm. The PageRank algorithm is a way to measure the importance of a webpage by analyzing the quantity and quality of the links that point to it.","sidebar":"networkx_guide"},"algorithms/shortest-path/a-star-search":{"id":"algorithms/shortest-path/a-star-search","title":"A* search algorithm","description":"A\\\\* algorithm is a graph traversal and path search algorithm often used in many fields of computer science. Starting from the starting node, it aims to find the path to the target node having the smallest cost.","sidebar":"networkx_guide"},"algorithms/shortest-path/dijkstra":{"id":"algorithms/shortest-path/dijkstra","title":"Dijkstra\u2019s algorithm","description":"Dijkstra\u2019s algorithm finds the shortest path between nodes in a graph. With the algorithm, you can find the shortest path from a starting node to all the other nods in the graph.","sidebar":"networkx_guide"},"algorithms/shortest-path/floyd-warshall":{"id":"algorithms/shortest-path/floyd-warshall","title":"Floyd-Warshall algorithm","description":"Floyd-Warshall algorithm is an algorithm for finding the shortest path between all the pairs of vertices in a weighted graph. The result of the algorithm is a list of lengths of shortest paths between all pairs of vertices.","sidebar":"networkx_guide"},"algorithms/shortest-path/shortest-path":{"id":"algorithms/shortest-path/shortest-path","title":"Shortest path algorithms","description":"When planning a road trip, we are trying to minimize our costs in many different areas - gas, time, overnight stays, traffic costs, etc. Calculating these costs can take a lot of effort and time, but what if there was a more elegant way that could solve the problem for you?","sidebar":"networkx_guide"},"functions/attributes/basics":{"id":"functions/attributes/basics","title":"Attribute basics","description":"1. How to store and access node attributes using NetworkX in Python?","sidebar":"networkx_guide"},"functions/functions":{"id":"functions/functions","title":"Functions overview","description":"This site is under construction.","sidebar":"networkx_guide"},"getting-started/getting-started":{"id":"getting-started/getting-started","title":"Getting started","description":"NetworkX is a Python package for the creation, manipulation and the study of the structure, dynamics and functions of complex networks. It offers data structures for graphs, digraphs, multigraphs, and multidigraphs as well as standard graph algorithms. It enables you to load and store networks in many data formats, build and analyze network structure, generate types of random or classic networks, and much more. It is a great starting point for someone looking to get quick insights from their data on the fly.","sidebar":"networkx_guide"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"Installing with pip","sidebar":"networkx_guide"},"license":{"id":"license","title":"license","description":"NetworkX is distributed with the 3-clause BSD license."},"other-resources":{"id":"other-resources","title":"Other useful resources","description":"| Resource    | Description |","sidebar":"networkx_guide"},"overview":{"id":"overview","title":"Overview","description":"Welcome to the NetworkX Guide!","sidebar":"networkx_guide"},"visualization/basics":{"id":"visualization/basics","title":"Drawing basics","description":"1. How to draw directed graphs using NetworkX in Python?","sidebar":"networkx_guide"},"visualization/visualization":{"id":"visualization/visualization","title":"Visualization overview","description":"Even though the NetworkX package isn\'t primarily a drawing tool, some functionalities come builtin.","sidebar":"networkx_guide"}}}')}}]);