"use strict";(self.webpackChunknetworkx_guide=self.webpackChunknetworkx_guide||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"networkx_guide":[{"type":"link","label":"Overview","href":"/","docId":"overview"},{"type":"category","label":"Getting started","items":[{"type":"link","label":"NetworkX basics","href":"/basics","docId":"getting-started/basics"},{"type":"link","label":"Installation","href":"/installation","docId":"getting-started/installation"}],"collapsed":true,"collapsible":true,"href":"/getting-started"},{"type":"category","label":"Visualizing graphs","items":[{"type":"link","label":"Drawing basics","href":"/visualization/basics","docId":"visualization/basics"}],"collapsed":true,"collapsible":true,"href":"/visualization"},{"type":"category","label":"Functions","items":[{"type":"category","label":"Attributes","items":[{"type":"link","label":"Attribute basics","href":"/functions/attributes/basics","docId":"functions/attributes/basics"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true,"href":"/functions"},{"type":"category","label":"Algorithms","items":[{"type":"category","label":"Graph traversals","items":[{"type":"link","label":"Breadth-first search","href":"/algorithms/graph-traversals/bfs","docId":"algorithms/graph-traversals/breadth-first-search"},{"type":"link","label":"Depth-first search","href":"/algorithms/graph-traversals/dfs","docId":"algorithms/graph-traversals/depth-first-search"}],"collapsed":true,"collapsible":true,"href":"/algorithms/graph-traversals"},{"type":"category","label":"Shortest path","items":[{"type":"link","label":"Dijkstra","href":"/algorithms/shortest-path/dijkstra","docId":"algorithms/shortest-path/dijkstra"},{"type":"link","label":"A* search","href":"/algorithms/shortest-path/a-star-search","docId":"algorithms/shortest-path/a-star-search"},{"type":"link","label":"Floyd-Warshall","href":"/algorithms/shortest-path/floyd-warshall","docId":"algorithms/shortest-path/floyd-warshall"}],"collapsed":true,"collapsible":true,"href":"/algorithms/shortest-path"},{"type":"category","label":"Centrality algorithms","items":[{"type":"link","label":"PageRank","href":"/algorithms/centrality-algorithms/pagerank","docId":"algorithms/centrality-algorithms/pagerank"},{"type":"link","label":"Betweenness centrality","href":"/algorithms/centrality-algorithms/betweenness-centrality","docId":"algorithms/centrality-algorithms/betweenness-centrality"},{"type":"link","label":"Degree centrality","href":"/algorithms/centrality-algorithms/degree-centrality","docId":"algorithms/centrality-algorithms/degree-centrality"},{"type":"link","label":"Closeness centrality","href":"/algorithms/centrality-algorithms/closeness-centrality","docId":"algorithms/centrality-algorithms/closeness-centrality"},{"type":"link","label":"Katz centrality","href":"/algorithms/centrality-algorithms/katz-centrality","docId":"algorithms/centrality-algorithms/katz-centrality"}],"collapsed":true,"collapsible":true,"href":"/algorithms/centrality-algorithms"},{"type":"category","label":"Community detection","items":[{"type":"link","label":"Girvan-Newman","href":"/algorithms/community-detection/girvan-newman","docId":"algorithms/community-detection/girvan-newman"}],"collapsed":true,"collapsible":true,"href":"/algorithms/community-detection"},{"type":"link","label":"Weakly connected components (Union find)","href":"/algorithms/components/weakly-connected-components","docId":"algorithms/components/weakly-connected-components"}],"collapsed":true,"collapsible":true,"href":"/algorithms"},{"type":"link","label":"Other resources","href":"/other-resources","docId":"other-resources"},{"type":"link","label":"FAQ","href":"/faq","docId":"faq"}]},"docs":{"algorithms/algorithms":{"id":"algorithms/algorithms","title":"Algorithms overview","description":"Graph analytics, also called network analysis, is the use of a graph-based approach to analyze highly connected data. It is a set of tools that helps us understand relationships between nodes and identify values or uncover insights within the data. Graph algorithms are a subset of those tools and they are used to solve problems related to graph theory in economics, aeronautics, physics, biology, mathematics, computer science etc. There is a vast amount of algorithms, and let\u2019s learn more about the most important ones:","sidebar":"networkx_guide"},"algorithms/centrality-algorithms/betweenness-centrality":{"id":"algorithms/centrality-algorithms/betweenness-centrality","title":"Betweenness centrality","description":"Centrality analysis provides information about the node\u2019s importance for an information flow or connectivity of the network. Betweenness centrality is one of the most used centrality metrics. Betweenness centrality measures the extent to which a node lies on paths between other nodes in the graph. Nodes with higher betweenness have more influence within a network.","sidebar":"networkx_guide"},"algorithms/centrality-algorithms/closeness-centrality":{"id":"algorithms/centrality-algorithms/closeness-centrality","title":"Closeness centrality","description":"Another important centrality measure is closeness centrality. Closeness centrality is a measure of centrality in a network calculated as the reciprocal of the sum of the lengths of the shortest paths between the node and all other nodes in the graph. Simply, the closer the node is to other nodes, the more central it is.","sidebar":"networkx_guide"},"algorithms/centrality-algorithms/degree-centrality":{"id":"algorithms/centrality-algorithms/degree-centrality","title":"Degree centrality","description":"Historically, the first centrality was the degree centrality. Conceptually, it is the simplest algorithm to measure centrality. Degree centrality is defined as the number of connections a node has. Here, we have to differentiate two types of edges - edges that go \u201cin\u201d the node and edges that go \u201cout\u201d of the node. Therefore, there are two separate measures of degree centrality - indegree and outdegree. Indegree centrality is often interpreted as a form of popularity and outdegree as a form of companionship.","sidebar":"networkx_guide"},"algorithms/centrality-algorithms/katz-centrality":{"id":"algorithms/centrality-algorithms/katz-centrality","title":"Katz centrality","description":"Katz centrality is a measure of centrality that doesn\u2019t consider only the shortest path. It considers the total number of walks in a graph. A walk in a graph is a sequence of edges which joins a sequence of nodes. (e.g 1\u21922\u21923\u21924\u21922\u21921\u21923). Katz centrality computes the relative influence of a node within a graph by measuring the number of the immediate neighbors and all other nodes in the graph.","sidebar":"networkx_guide"},"algorithms/centrality-algorithms/overview":{"id":"algorithms/centrality-algorithms/overview","title":"Centrality algorithms overview","description":"Result of the centrality algorithm gives answer to the question \\"What characterizes an important node?\\". The result of the centrality algorithm provides ranking which identifies important nodes. Common applications are identifying most influential user in social networks, key infrastructure nodes in urban networks, super-spreaders of disease, etc.","sidebar":"networkx_guide"},"algorithms/centrality-algorithms/pagerank":{"id":"algorithms/centrality-algorithms/pagerank","title":"PageRank algorithm","description":"Typing terms in Google and searching them up yields a lot of results. But why are we getting the results in that order? The answer to that question is the PageRank algorithm. The PageRank algorithm is a way to measure the importance of a webpage by analyzing the quantity and quality of the links that point to it.","sidebar":"networkx_guide"},"algorithms/community-detection/girvan-newman":{"id":"algorithms/community-detection/girvan-newman","title":"Girvan-Newman algorithm","description":"The Girvan-Newman algorithm for the detection and analysis of community structure relies on the iterative elimination of edges that have the highest number of shortest paths between nodes passing through them. By removing edges from the graph one-by-one, the network breaks down into smaller pieces, so-called communities. The algorithm was introduced by Michelle Girvan and Mark Newman.","sidebar":"networkx_guide"},"algorithms/community-detection/overview":{"id":"algorithms/community-detection/overview","title":"Community detection algorithms overview","description":"While humans are very good at detecting distinct or repetitive patterns among a few components, the nature of large interconnected networks makes it practically impossible to perform such basic tasks manually. Groups of densely connected nodes are easy to spot visually, but more sophisticated methods are needed to perform these tasks programmatically. Community detection algorithms are used to find such groups of densely connected components in various networks.","sidebar":"networkx_guide"},"algorithms/components/weakly-connected-components":{"id":"algorithms/components/weakly-connected-components","title":"Weakly connected components algorithm (Union find)","description":"A weakly connected component is a subgraph that is unreachable from other nodes/vertices of a graph or subgraph. The algorithm was described by A. Galler and Michael J. in 1964 and specific implementations either utilize breadth-first search or depth-first search to find the graph components.","sidebar":"networkx_guide"},"algorithms/graph-traversals/breadth-first-search":{"id":"algorithms/graph-traversals/breadth-first-search","title":"Breadth-first search","description":"In breadth-first search (BFS) traversal starts from a single node, and the order of visited nodes is decided based on nodes\' distance from the source node. This means that when a certain node is visited, it can be safely assumed that all nodes that are fewer relationships away from the source node have already been visited, resulting in the shortest path from the source node to the newly visited node.","sidebar":"networkx_guide"},"algorithms/graph-traversals/depth-first-search":{"id":"algorithms/graph-traversals/depth-first-search","title":"Depth-first search","description":"Depth-first search (DFS) is an algorithm for traversing through the graph. The algorithm starts at the root node and explores each neighboring node as far as possible. The moment it reaches a dead-end, it backtracks until it finds a new, undiscovered node, then traverses from that node to find more undiscovered nodes. In that way, the algorithm visits each node in the graph.","sidebar":"networkx_guide"},"algorithms/graph-traversals/overview":{"id":"algorithms/graph-traversals/overview","title":"Graph traversals","description":"Graph traversal is a process of visiting every node in the graph. Think of a postman that has to visit all of the houses in your block. Some nodes can be visited more than once. Usually, it is necessary to remember which nodes were previously visited to revisit those nodes as infrequently as possible.","sidebar":"networkx_guide"},"algorithms/shortest-path/a-star-search":{"id":"algorithms/shortest-path/a-star-search","title":"A* search algorithm","description":"A\\\\* search algorithm is a graph traversal and path search algorithm often used in many fields of computer science. Starting from the starting node, it aims to find the path to the target node having the smallest cost.","sidebar":"networkx_guide"},"algorithms/shortest-path/dijkstra":{"id":"algorithms/shortest-path/dijkstra","title":"Dijkstra\u2019s algorithm","description":"Dijkstra\u2019s algorithm finds the shortest path between nodes in a graph. With the algorithm, you can find the shortest path from a starting node to all the other nods in the graph.","sidebar":"networkx_guide"},"algorithms/shortest-path/floyd-warshall":{"id":"algorithms/shortest-path/floyd-warshall","title":"Floyd-Warshall algorithm","description":"Floyd-Warshall algorithm is an algorithm for finding the shortest path between all the pairs of vertices in a weighted graph. The result of the algorithm is a list of lengths of shortest paths between all pairs of vertices.","sidebar":"networkx_guide"},"algorithms/shortest-path/overview":{"id":"algorithms/shortest-path/overview","title":"Shortest path algorithms overview","description":"When planning a road trip, we are trying to minimize our costs in many different areas - gas, time, overnight stays, traffic costs, etc. Calculating these costs can take a lot of effort and time, but what if there was a more elegant way that could solve the problem for you?","sidebar":"networkx_guide"},"faq":{"id":"faq","title":"Frequently asked questions","description":"Here is the list of most common questions and answers from different developer communities.","sidebar":"networkx_guide"},"functions/attributes/basics":{"id":"functions/attributes/basics","title":"Attribute basics","description":"How to store and access node attributes using NetworkX in Python?","sidebar":"networkx_guide"},"functions/functions":{"id":"functions/functions","title":"Functions overview","description":"Graph functions","sidebar":"networkx_guide"},"getting-started/basics":{"id":"getting-started/basics","title":"NetworkX basics","description":"In this guide you\'ll learn how to:","sidebar":"networkx_guide"},"getting-started/getting-started":{"id":"getting-started/getting-started","title":"Getting started","description":"NetworkX is a Python package for the creation, manipulation and the study of the structure, dynamics and functions of complex networks. It offers data structures for graphs, digraphs, multigraphs, and multidigraphs as well as standard graph algorithms. It enables you to load and store networks in many data formats, build and analyze network structure, generate types of random or classic networks, and much more. It is a great starting point for someone looking to get quick insights from their data on the fly.","sidebar":"networkx_guide"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"Installing with pip","sidebar":"networkx_guide"},"license":{"id":"license","title":"license","description":"NetworkX is distributed with the 3-clause BSD license."},"other-resources":{"id":"other-resources","title":"Other useful resources","description":"| Resource    | Description |","sidebar":"networkx_guide"},"overview":{"id":"overview","title":"Overview","description":"Welcome to the NetworkX Guide!","sidebar":"networkx_guide"},"visualization/basics":{"id":"visualization/basics","title":"Drawing basics","description":"Draw methods","sidebar":"networkx_guide"},"visualization/visualization":{"id":"visualization/visualization","title":"Visualizing graphs overview","description":"Even though the NetworkX package isn\'t primarily a drawing tool, basic drawing with capabilities with Matplotlib and the open-source Graphviz software package are included.","sidebar":"networkx_guide"}}}')}}]);